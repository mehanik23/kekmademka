#!/bin/bash

# DHCP Server Installation Script for Debian 10
# Using dnsmasq as DHCP server

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_color() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        print_color $RED "This script must be run as root!"
        exit 1
    fi
}

# Function to validate IP address
validate_ip() {
    local ip=$1
    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        return $?
    else
        return 1
    fi
}

# Function to validate MAC address
validate_mac() {
    local mac=$1
    if [[ $mac =~ ^([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}$ ]]; then
        return 0
    else
        return 1
    fi
}

# Function to check IP conflicts
check_ip_conflict() {
    local ip=$1
    if ping -c 1 -W 1 $ip &>/dev/null; then
        return 0  # IP is in use
    else
        return 1  # IP is free
    fi
}

# Function to get network interfaces
get_interfaces() {
    local interfaces=()
    for iface in $(ip -o link show | awk -F': ' '{print $2}' | grep -v lo); do
        interfaces+=("$iface")
    done
    echo "${interfaces[@]}"
}

# Function to select interfaces
select_interfaces() {
    local interfaces=($(get_interfaces))
    local selected=()
    
    print_color $GREEN "\nAvailable network interfaces:"
    for i in "${!interfaces[@]}"; do
        echo "$((i+1)). ${interfaces[$i]}"
    done
    
    while true; do
        read -p "Select interface number (or 'done' to finish): " choice
        if [[ $choice == "done" ]]; then
            break
        elif [[ $choice =~ ^[0-9]+$ ]] && [ $choice -ge 1 ] && [ $choice -le ${#interfaces[@]} ]; then
            selected+=("${interfaces[$((choice-1))]}")
            print_color $GREEN "Added: ${interfaces[$((choice-1))]}"
        else
            print_color $RED "Invalid selection!"
        fi
    done
    
    echo "${selected[@]}"
}

# Main script starts here
clear
print_color $GREEN "=== DHCP Server Installation Script for Debian 10 ==="
print_color $GREEN "=== Using dnsmasq ==="
echo

# Check root privileges
check_root

# Update system and install dnsmasq
print_color $YELLOW "Updating system packages..."
apt-get update -y
apt-get upgrade -y

print_color $YELLOW "Installing dnsmasq..."
apt-get install -y dnsmasq

# Stop dnsmasq service temporarily
systemctl stop dnsmasq

# Backup original configuration
if [ -f /etc/dnsmasq.conf ]; then
    cp /etc/dnsmasq.conf /etc/dnsmasq.conf.backup.$(date +%Y%m%d_%H%M%S)
    print_color $GREEN "Original configuration backed up"
fi

# Start configuration
print_color $GREEN "\n=== DHCP Configuration ==="

# Ask about VLAN usage
read -p "Are you using VLAN interfaces? (yes/no): " use_vlan
use_vlan=$(echo $use_vlan | tr '[:upper:]' '[:lower:]')

# Select interfaces
if [[ $use_vlan == "yes" ]]; then
    print_color $YELLOW "\nDetected VLAN interfaces:"
    vlan_interfaces=$(ip -o link show | awk -F': ' '{print $2}' | grep -E '^vlan[0-9]+' || true)
    if [[ -z $vlan_interfaces ]]; then
        print_color $RED "No VLAN interfaces found!"
    else
        echo "$vlan_interfaces"
    fi
fi

print_color $YELLOW "\nSelect interfaces for DHCP service:"
selected_interfaces=($(select_interfaces))

if [ ${#selected_interfaces[@]} -eq 0 ]; then
    print_color $RED "No interfaces selected! Exiting."
    exit 1
fi

# Create new configuration
cat > /etc/dnsmasq.conf << EOF
# Dnsmasq configuration for DHCP server
# Generated by dhcp.sh script on $(date)

# Disable DNS function
port=0

# Enable DHCP logging
log-dhcp

# DHCP authoritative mode
dhcp-authoritative

EOF

# Configure each interface
for iface in "${selected_interfaces[@]}"; do
    print_color $GREEN "\n=== Configuring interface: $iface ==="
    
    # Get current IP of interface if exists
    current_ip=$(ip -4 addr show $iface | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | head -1 || true)
    if [[ -n $current_ip ]]; then
        print_color $YELLOW "Current IP on $iface: $current_ip"
    fi
    
    # Ask for DHCP range
    while true; do
        read -p "Enter DHCP range start IP for $iface: " range_start
        if validate_ip $range_start; then
            if check_ip_conflict $range_start; then
                print_color $YELLOW "Warning: IP $range_start appears to be in use!"
                read -p "Continue anyway? (yes/no): " cont
                if [[ $cont == "yes" ]]; then
                    break
                fi
            else
                break
            fi
        else
            print_color $RED "Invalid IP address!"
        fi
    done
    
    while true; do
        read -p "Enter DHCP range end IP for $iface: " range_end
        if validate_ip $range_end; then
            if check_ip_conflict $range_end; then
                print_color $YELLOW "Warning: IP $range_end appears to be in use!"
                read -p "Continue anyway? (yes/no): " cont
                if [[ $cont == "yes" ]]; then
                    break
                fi
            else
                break
            fi
        else
            print_color $RED "Invalid IP address!"
        fi
    done
    
    # Ask for gateway
    while true; do
        read -p "Enter gateway IP for $iface: " gateway
        if validate_ip $gateway; then
            break
        else
            print_color $RED "Invalid IP address!"
        fi
    done
    
    # Ask for DNS servers
    dns_servers=""
    while true; do
        read -p "Enter DNS server IP (or 'done' to finish): " dns
        if [[ $dns == "done" ]]; then
            break
        elif validate_ip $dns; then
            if [[ -z $dns_servers ]]; then
                dns_servers=$dns
            else
                dns_servers="$dns_servers,$dns"
            fi
            print_color $GREEN "Added DNS: $dns"
        else
            print_color $RED "Invalid IP address!"
        fi
    done
    
    # Ask for domain name
    read -p "Enter domain name (optional, press Enter to skip): " domain_name
    
    # Write interface configuration
    echo "" >> /etc/dnsmasq.conf
    echo "# Configuration for interface $iface" >> /etc/dnsmasq.conf
    echo "interface=$iface" >> /etc/dnsmasq.conf
    echo "dhcp-range=$iface,$range_start,$range_end,12h" >> /etc/dnsmasq.conf
    
    if [[ -n $gateway ]]; then
        echo "dhcp-option=$iface,3,$gateway" >> /etc/dnsmasq.conf
    fi
    
    if [[ -n $dns_servers ]]; then
        echo "dhcp-option=$iface,6,$dns_servers" >> /etc/dnsmasq.conf
    fi
    
    if [[ -n $domain_name ]]; then
        echo "dhcp-option=$iface,15,$domain_name" >> /etc/dnsmasq.conf
    fi
done

# Ask for static IP reservations
print_color $GREEN "\n=== Static IP Reservations ==="
read -p "Do you want to add static IP reservations? (yes/no): " add_static
add_static=$(echo $add_static | tr '[:upper:]' '[:lower:]')

if [[ $add_static == "yes" ]]; then
    echo "" >> /etc/dnsmasq.conf
    echo "# Static IP reservations" >> /etc/dnsmasq.conf
    
    while true; do
        read -p "\nAdd a static reservation? (yes/no): " add_more
        add_more=$(echo $add_more | tr '[:upper:]' '[:lower:]')
        
        if [[ $add_more != "yes" ]]; then
            break
        fi
        
        # Get MAC address
        while true; do
            read -p "Enter MAC address (format: AA:BB:CC:DD:EE:FF): " mac_addr
            if validate_mac $mac_addr; then
                break
            else
                print_color $RED "Invalid MAC address format!"
            fi
        done
        
        # Get IP address
        while true; do
            read -p "Enter IP address for this device: " static_ip
            if validate_ip $static_ip; then
                if check_ip_conflict $static_ip; then
                    print_color $YELLOW "Warning: IP $static_ip appears to be in use!"
                    read -p "Continue anyway? (yes/no): " cont
                    if [[ $cont == "yes" ]]; then
                        break
                    fi
                else
                    break
                fi
            else
                print_color $RED "Invalid IP address!"
            fi
        done
        
        # Get hostname (optional)
        read -p "Enter hostname for this device (optional): " hostname
        
        # Write static reservation
        if [[ -n $hostname ]]; then
            echo "dhcp-host=$mac_addr,$hostname,$static_ip" >> /etc/dnsmasq.conf
        else
            echo "dhcp-host=$mac_addr,$static_ip" >> /etc/dnsmasq.conf
        fi
        
        print_color $GREEN "Static reservation added!"
    done
fi

# Configure firewall
print_color $YELLOW "\n=== Configuring firewall rules ==="
# Check if iptables is installed
if ! command -v iptables &> /dev/null; then
    apt-get install -y iptables
fi

# Add firewall rules for DHCP
iptables -A INPUT -p udp --dport 67:68 -j ACCEPT
iptables -A OUTPUT -p udp --sport 67:68 -j ACCEPT

# Save iptables rules
if command -v netfilter-persistent &> /dev/null; then
    netfilter-persistent save
else
    # Install iptables-persistent
    DEBIAN_FRONTEND=noninteractive apt-get install -y iptables-persistent
    netfilter-persistent save
fi

print_color $GREEN "Firewall rules added for DHCP"

# Enable and start dnsmasq
print_color $YELLOW "\n=== Starting DHCP service ==="
systemctl enable dnsmasq
systemctl start dnsmasq

# Check service status
if systemctl is-active --quiet dnsmasq; then
    print_color $GREEN "DHCP server is running successfully!"
else
    print_color $RED "Failed to start DHCP server!"
    print_color $YELLOW "Check logs with: journalctl -xe"
    exit 1
fi

# Show configuration summary
print_color $GREEN "\n=== Configuration Summary ==="
echo "Configuration file: /etc/dnsmasq.conf"
echo "Service status: $(systemctl is-active dnsmasq)"
echo "Configured interfaces: ${selected_interfaces[@]}"
echo ""
print_color $GREEN "DHCP server installation completed successfully!"
print_color $YELLOW "\nUseful commands:"
echo "- Check DHCP leases: cat /var/lib/misc/dnsmasq.leases"
echo "- Restart service: systemctl restart dnsmasq"
echo "- View logs: journalctl -u dnsmasq -f"
echo "- Edit configuration: nano /etc/dnsmasq.conf"
